CREATE QUERY edge_nei_loader_{QUERYSUFFIX}(
    INT num_batches=1, 
    INT num_neighbors=10, 
    INT num_hops=2, 
    BOOL shuffle=FALSE,
    STRING filter_by,
    SET<STRING> v_types,
    SET<STRING> e_types,
    SET<STRING> seed_types,
    STRING kafka_address,
    STRING kafka_topic
) SYNTAX V1 { 
    /*
    This query generates the batches of edges and vertices attached to those edges.

    Parameters :
      num_batches    : Number of batches to divide all edges.
      num_neighbors  : Number of neighbors to expand from seeds.
      num_hops       : Number of hops to traverse to get neighbors.
      shuffle        : Whether to shuffle vertices before collecting data.
      filter_by      : A Boolean attribute to determine which edges are included.
      v_types        : Vertex types to be included.
      e_types        : Edge types to be included.
      seed_types     : Edge types to be included as seeds.
      kafka_address  : Address of the Kafka cluster to send data to.
      kafka_topic    : The kafka topic to send data to.
    */
    INT num_vertices;
    SumAccum<INT> @tmp_id;
    SumAccum<STRING> @@kafka_error;

    # Shuffle vertex ID if needed
    start = {v_types};
    IF shuffle THEN
        num_vertices = start.size();
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = floor(rand()*num_vertices);
    ELSE
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = getvid(s);
    END;

    # Generate batches
    FOREACH batch_id IN RANGE[0, num_batches-1] DO
        SetAccum<VERTEX> @@vertices;
        SumAccum<STRING> @@e_batch;
        SumAccum<STRING> @@v_batch;
        SetAccum<EDGE> @@printed_edges;
       
        start = {v_types};
        IF filter_by IS NOT NULL THEN
            res = 
                SELECT s
                FROM start:s -(seed_types:e)- v_types:t
                WHERE e.getAttr(filter_by, "BOOL") and ((s.@tmp_id+t.@tmp_id)*(s.@tmp_id+t.@tmp_id+1)/2+t.@tmp_id)%num_batches==batch_id
                ACCUM 
                    {SEEDEDGEATTRS},
                    @@printed_edges += e,
                    @@vertices += s,
                    @@vertices += t;
        ELSE
            res = 
                SELECT s
                FROM start:s -(seed_types:e)- v_types:t
                WHERE ((s.@tmp_id+t.@tmp_id)*(s.@tmp_id+t.@tmp_id+1)/2+t.@tmp_id)%num_batches==batch_id
                ACCUM 
                    {SEEDEDGEATTRS},
                    @@printed_edges += e,
                    @@vertices += s,
                    @@vertices += t;
        END;
    
        # Get seed vertices
        v_in_batch = @@vertices;
        seeds = 
            SELECT s 
            FROM v_in_batch:s 
            POST-ACCUM
                {VERTEXATTRS};
        # Get neighbors of seeeds
        FOREACH i IN RANGE[1, num_hops] DO
            seeds = SELECT t
                    FROM seeds:s -(e_types:e)- v_types:t 
                    SAMPLE num_neighbors EDGE WHEN s.outdegree() >= 1
                    ACCUM
                        IF NOT @@printed_edges.contains(e) THEN
                            {OTHEREDGEATTRS},
                            @@printed_edges += e
                        END;
            attr = 
                SELECT s
                FROM seeds:s 
                POST-ACCUM 
                    IF NOT @@vertices.contains(s) THEN
                        {VERTEXATTRS},
                        @@vertices += s
                    END;
        END;        
        IF kafka_address IS NOT NULL THEN
            IF write_to_kafka(kafka_address, kafka_topic, "vertex_batch_" + int_to_string(batch_id), @@v_batch)!=0 THEN
                @@kafka_error += ("Failed sending vertex batch " + int_to_string(batch_id) + "\n");
            END;
            IF write_to_kafka(kafka_address, kafka_topic, "edge_batch_" + int_to_string(batch_id), @@e_batch)!=0 THEN 
                @@kafka_error += ("Failed sending edge batch " + int_to_string(batch_id) + "\n");
            END;
        ELSE
            PRINT @@v_batch AS vertex_batch, @@e_batch AS edge_batch;   
        END;
    END;
    IF kafka_address IS NOT NULL THEN
        PRINT @@kafka_error as kafkaError;
    END;
}