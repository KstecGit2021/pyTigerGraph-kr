CREATE QUERY vertex_hloader_{QUERYSUFFIX}(
    SET<VERTEX> input_vertices,
    INT num_batches=1, 
    BOOL shuffle=FALSE,
    STRING filter_by
) SYNTAX V2 {
    /*
    This query generates batches of vertices. If `input_vertices` is given, it will generate 
    a batches of those vertices. Otherwise, it will divide all vertices into `num_batches`, 
    and return each batch separately.

    Parameters :
      input_vertices : What vertices to get.
      num_batches    : Number of batches to divide all vertices.
      shuffle        : Whether to shuffle vertices before collecting data.
      filter_by      : A Boolean attribute to determine which vertices are included.
                       Only effective when `input_vertices` is NULL.
    */
    INT num_vertices;
    SumAccum<INT> @tmp_id;

    # Shuffle vertex ID if needed
    start = {ANY};
    IF shuffle THEN
        num_vertices = start.size();
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = floor(rand()*num_vertices);
    ELSE
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = getvid(s);
    END;

    # Generate batches
    FOREACH batch_id IN RANGE[0, num_batches-1] DO
        MapAccum<VERTEX, STRING> @@v_batch;
        IF input_vertices.size()==0 THEN
            start = {ANY};
            IF filter_by IS NOT NULL THEN
                seeds = SELECT s 
                        FROM start:s 
                        WHERE s.getAttr(filter_by, "BOOL") and s.@tmp_id % num_batches == batch_id
                        POST-ACCUM @@v_batch += (s -> (int_to_string(getvid(s)) + "," + {VERTEXATTRS} + "\n"));
            ELSE
                seeds = SELECT s 
                        FROM start:s 
                        WHERE s.@tmp_id % num_batches == batch_id
                        POST-ACCUM @@v_batch += (s -> (int_to_string(getvid(s)) + "," + {VERTEXATTRS} + "\n"));
            END;
        ELSE
            start = input_vertices;
            seeds = SELECT s 
                    FROM start:s 
                    POST-ACCUM @@v_batch += (s -> (int_to_string(getvid(s)) + "," + {VERTEXATTRS} + "\n"));
        END;
        # Add to response
        PRINT @@v_batch AS vertex_batch;  
    END;
}