CREATE QUERY graph_hloader_{QUERYSUFFIX}(
    INT num_batches=1, 
    BOOL shuffle=FALSE,
    STRING filter_by
) SYNTAX V2 { 
    /*
    This query generates the batches of edges and vertices attached to those edges.

    Parameters :
      num_batches    : Number of batches to divide all edges.
      shuffle        : Whether to shuffle vertices before collecting data.
      filter_by      : A Boolean attribute to determine which edges are included.
    */
    INT num_vertices;
    SumAccum<INT> @tmp_id;

    # Shuffle vertex ID if needed
    start = {ANY};
    IF shuffle THEN
        num_vertices = start.size();
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = floor(rand()*num_vertices);
    ELSE
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = getvid(s);
    END;

    # Generate batches
    FOREACH batch_id IN RANGE[0, num_batches-1] DO
        SetAccum<VERTEX> @@vertices;
        SumAccum<STRING> @@e_batch;
        MapAccum<VERTEX, STRING> @@v_batch_map;
       
        start = {ANY};
        IF filter_by IS NOT NULL THEN
            res = 
                SELECT s
                FROM start:s-((_>|_):e)-:t
                WHERE e.getAttr(filter_by, "BOOL") and ((s.@tmp_id+t.@tmp_id)*(s.@tmp_id+t.@tmp_id+1)/2+t.@tmp_id)%num_batches==batch_id
                ACCUM @@e_batch += (int_to_string(getvid(s)) + "," + int_to_string(getvid(t)) + "," + {EDGEATTRS} + "\n"),
                      @@vertices += s,
                      @@vertices += t;
        ELSE
            res = 
                SELECT s
                FROM start:s-((_>|_):e)-:t
                WHERE ((s.@tmp_id+t.@tmp_id)*(s.@tmp_id+t.@tmp_id+1)/2+t.@tmp_id)%num_batches==batch_id
                ACCUM @@e_batch += (int_to_string(getvid(s)) + "," + int_to_string(getvid(t))+ "," + {EDGEATTRS} + "\n"),
                      @@vertices += s,
                      @@vertices += t;
        END;
    
        # Get vertex attributes
        v_in_batch = @@vertices;
        attr = 
            SELECT s
            FROM v_in_batch:s 
            POST-ACCUM @@v_batch_map += (s -> (int_to_string(getvid(s)) + "," + {VERTEXATTRS} + "\n"));
        PRINT @@v_batch_map AS vertex_batch, @@e_batch AS edge_batch;   
   
    END;
}