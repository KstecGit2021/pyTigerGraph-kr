CREATE QUERY edge_loader_{QUERYSUFFIX}(
    INT num_batches=1, 
    BOOL shuffle=FALSE,
    STRING filter_by,
    SET<STRING> e_types,
    STRING kafka_address,
    STRING kafka_topic,
    STRING security_protocol,
    STRING sasl_mechanism,
    STRING sasl_username,
    STRING sasl_password,
    STRING ssl_ca_location
) SYNTAX V1 { 
    /*
    This query generates batches of edges.

    Parameters :
      num_batches    : Number of batches to divide the edges.
      shuffle        : Whether to shuffle edges before collecting data.
      filter_by      : A Boolean attribute to determine which edges are included.
      e_types        : Edge types to be included.
      kafka_address  : Address of the Kafka cluster to send data to.
      kafka_topic    : The Kafka topic to send data to.
      security_protocol : Security prototol for Kafka.
      sasl_mechanism : Authentication mechanism for Kafka.
      sasl_username  : SASL username for Kafka. 
      sasl_password  : SASL password for Kafka. 
      ssl_ca_location: Path to CA certificate for verifying the Kafka broker key
    */
    INT num_vertices;
    INT temp;
    SumAccum<INT> @tmp_id;
    SumAccum<STRING> @@kafka_error;

    # Shuffle vertex ID if needed
    start = {ANY};
    IF shuffle THEN
        num_vertices = start.size();
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = floor(rand()*num_vertices);
    ELSE
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = getvid(s);
    END;

    # Generate batches
    FOREACH batch_id IN RANGE[0, num_batches-1] DO
        SumAccum<STRING> @@e_batch;
        start = {ANY};
        IF filter_by IS NOT NULL THEN
            res = 
                SELECT s
                FROM start:s -(e_types:e)- :t
                WHERE e.getAttr(filter_by, "BOOL") and ((s.@tmp_id+t.@tmp_id)*(s.@tmp_id+t.@tmp_id+1)/2+t.@tmp_id)%num_batches==batch_id
                ACCUM 
                    {EDGEATTRS}; 
        ELSE
            res = 
                SELECT s
                FROM start:s -(e_types:e)- :t
                WHERE ((s.@tmp_id+t.@tmp_id)*(s.@tmp_id+t.@tmp_id+1)/2+t.@tmp_id)%num_batches==batch_id
                ACCUM 
                    {EDGEATTRS};
        END;
        # Export batch
        IF kafka_address IS NOT NULL THEN
            # Write to kafka
            IF security_protocol IS NOT NULL THEN
                temp = write_to_kafka(kafka_address, kafka_topic, "edge_batch_" + int_to_string(batch_id), @@e_batch, security_protocol, sasl_mechanism, sasl_username, sasl_password, ssl_ca_location);
                IF temp!=0 THEN 
                    # If user is using the free version of UDF then add an error to inform the user they need to upgrade to use Kafka streaming function  
                    IF temp==777 THEN
                        @@kafka_error += ("Failed, you need to upgrade to use Kafka streaming function."+ "\n");
                    ELSE
                        @@kafka_error += ("Failed sending edge batch " + int_to_string(batch_id) + "\n");
                    END;
                END;
            ELSE 
                temp = write_to_kafka(kafka_address, kafka_topic, "edge_batch_" + int_to_string(batch_id), @@e_batch, "", "", "", "", "");
                IF temp!=0 THEN 
                    IF temp==777 THEN 
                        @@kafka_error += ("Failed, you need to upgrade to use Kafka streaming function."+ "\n");
                    ELSE
                        @@kafka_error += ("Failed sending edge batch " + int_to_string(batch_id) + "\n");
                    END;
                END;
            END;
        ELSE
            # Add to response
            PRINT @@e_batch AS edge_batch;
        END;
    END; 
    IF kafka_address IS NOT NULL THEN
        PRINT @@kafka_error as kafkaError;
    END;
}
