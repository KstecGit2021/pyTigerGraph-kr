CREATE QUERY neighbor_loader_{QUERYSUFFIX}(
    SET<VERTEX> input_vertices,
    INT num_batches=1, 
    INT num_neighbors=10, 
    INT num_hops=2, 
    BOOL shuffle=FALSE,
    STRING filter_by,
    SET<STRING> v_types,
    SET<STRING> e_types,
    SET<STRING> seed_types,
    STRING kafka_address,
    STRING kafka_topic
) SYNTAX V1 { 
    /*
    This query generates the neighborhood subgraphs of given seed vertices (i.e., `input_vertices`).
    If seed vertices are not given, then it will divide all vertices into `num_batches`, and use each 
    batch as seeds.

    Parameters :
      input_vertices : Seed vertices to gather neighborhood subgraphs.
      num_batches    : Number of batches to divide all vertices into.
      num_neighbors  : Number of neighbors to expand from seeds.
      num_hops       : Number of hops to traverse to get neighbors.
      shuffle        : Whether to shuffle vertices before collecting data.
      filter_by      : A Boolean attribute to determine which vertices are eligible as seeds.
                       Only effective when `input_vertices` is NULL.
      v_types        : Vertex types to be included.
      e_types        : Edge types to be included.
      seed_types     : Vertex types to be included as seeds.
      kafka_address  : Address of the Kafka cluster to send data to.
      kafka_topic    : The kafka topic to send data to.
    */
    INT num_vertices;
    SumAccum<INT> @tmp_id;
    SumAccum<STRING> @@kafka_error;

    # Shuffle vertex ID if needed
    IF input_vertices.size()==0 THEN
        start = {seed_types};
        IF shuffle THEN
            num_vertices = start.size();
            res = SELECT s 
                FROM start:s
                POST-ACCUM s.@tmp_id = floor(rand()*num_vertices);
        ELSE
            res = SELECT s 
                FROM start:s
                POST-ACCUM s.@tmp_id = getvid(s);
        END;
    END;

    # Generate subgraphs
    FOREACH batch_id IN RANGE[0, num_batches-1] DO
        SumAccum<STRING> @@v_batch;
        SumAccum<STRING> @@e_batch;
        SetAccum<VERTEX> @@printed_vertices;
        SetAccum<EDGE> @@printed_edges;
        # Get seeds
        IF input_vertices.size()==0 THEN
            start = {seed_types};
            IF filter_by IS NOT NULL THEN
                seeds = SELECT s 
                        FROM start:s 
                        WHERE s.getAttr(filter_by, "BOOL") and s.@tmp_id % num_batches == batch_id
                        POST-ACCUM 
                            {SEEDVERTEXATTRS},
                            @@printed_vertices += s;
            ELSE
                seeds = SELECT s 
                        FROM start:s 
                        WHERE s.@tmp_id % num_batches == batch_id
                        POST-ACCUM
                            {SEEDVERTEXATTRS},
                            @@printed_vertices += s;
            END;
        ELSE
            start = input_vertices;
            seeds = SELECT s 
                    FROM start:s 
                    POST-ACCUM
                        {SEEDVERTEXATTRS},
                        @@printed_vertices += s;
        END;
        # Get neighbors of seeeds
        FOREACH i IN RANGE[1, num_hops] DO
            seeds = SELECT t
                    FROM seeds:s -(e_types:e)- v_types:t 
                    SAMPLE num_neighbors EDGE WHEN s.outdegree() >= 1
                    ACCUM
                        IF NOT @@printed_edges.contains(e) THEN
                            {EDGEATTRS},
                            @@printed_edges += e
                        END;
            attr = SELECT s
                FROM seeds:s 
                POST-ACCUM 
                    IF NOT @@printed_vertices.contains(s) THEN
                        {OTHERVERTEXATTRS},
                        @@printed_vertices += s
                    END;
        END;
        IF kafka_address IS NOT NULL THEN
            # Write to kafka
            IF write_to_kafka(kafka_address, kafka_topic, "vertex_batch_" + int_to_string(batch_id), @@v_batch)!=0 THEN
                @@kafka_error += ("Failed sending vertex batch " + int_to_string(batch_id) + "\n");
            END;
            IF write_to_kafka(kafka_address, kafka_topic, "edge_batch_" + int_to_string(batch_id), @@e_batch)!=0 THEN 
                @@kafka_error += ("Failed sending edge batch " + int_to_string(batch_id) + "\n");
            END;
        ELSE
            # Add to response
            IF input_vertices.size()==0 THEN
                PRINT @@v_batch AS vertex_batch, @@e_batch AS edge_batch;  
            ELSE
                MapAccum<UINT, VERTEX> @@id_map;
                source = @@printed_vertices;
                res = 
                    SELECT s 
                    FROM source:s
                    POST-ACCUM @@id_map += (getvid(s) -> s);
                PRINT @@v_batch AS vertex_batch, @@e_batch AS edge_batch, @@id_map AS pids; 
            END;
        END;                          
    END;
    IF kafka_address IS NOT NULL THEN
        PRINT @@kafka_error as kafkaError;
    END;
}